version: '3'
networks:
  zrb:
    name: zrb
services:

  #############################################################################
  # Message bus
  #############################################################################

  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v22.3.11
    container_name: snake_app_name_redpanda
    hostname: redpanda
    # Redpanda docker configuration: https://docs.redpanda.com/docs/reference/docker-compose/#configure-redpanda-in-docker
    # Redpanda node configuration example: https://docs.redpanda.com/docs/reference/node-configuration-sample/
    command:
    - redpanda
    - start
    - --kafka-addr PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
    - --advertise-kafka-addr PLAINTEXT://redpanda:29092,OUTSIDE://localhost:9092
    - --pandaproxy-addr PLAINTEXT://0.0.0.0:28082,OUTSIDE://0.0.0.0:8082
    - --advertise-pandaproxy-addr PLAINTEXT://redpanda:28082,OUTSIDE://localhost:8082
    - --rpc-addr 0.0.0.0:33145
    - --advertise-rpc-addr redpanda:33145
    - --smp 1
    - --memory 1G
    - --mode dev-container
    - --default-log-level=warn
    - --set sasl_mechanism=${KAFKA_SASL_MECHANISM}
    - --set sasl_username=${KAFKA_SASL_USER}
    - --set sasl_password=${KAFKA_SASL_PASS}
    ports:
    - 8082:8082
    - ${KAFKA_OUTSIDE_HOST_PORT:-9092}:9092
    - 28082:28082
    - ${KAFKA_PLAINTEXT_HOST_PORT:-29092}:29092
    environment:
      KAFKA_SASL_MECHANISM: ${KAFKA_SASL_MECHANISM:-SCRAM-SHA-256}
      KAFKA_SASL_USER: ${KAFKA_SASL_USER:-admin}
      KAFKA_SASL_PASS: ${KAFKA_SASL_PASS:-admin}
    restart: unless-stopped
    profiles:
    - kafka
    healthcheck:
      test: ["CMD", "redpanda", "admin", "check"]
      interval: 5s
      timeout: 1s
      retries: 30
    networks:
    - zrb


  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:v2.2.2
    container_name: snake_app_name_redpanda_console
    hostname: redpanda-console
    ports:
    - ${REDPANDA_CONSOLE_HOST_PORT:-9000}:8080
    environment:
      KAFKA_BROKERS: redpanda:29092
    profiles:
    - kafka
    depends_on:
    - redpanda
    restart: unless-stopped
    networks:
    - zrb


  rabbitmq:
    image: rabbitmq:3-management
    container_name: snake_app_name_rabbitmq
    hostname: rabbitmq
    ports:
    - "${RABBITMQ_HOST_PORT:-5672}:5672"
    - "${RABBITMQ_MANAGEMENT_HOST_PORT:-15672}:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-guest}
    restart: unless-stopped
    profiles:
    - rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 1s
      retries: 30
    networks:
    - zrb

  #############################################################################
  # Database
  #############################################################################

  postgresql:
    image: postgres:15.2
    container_name: snake_app_name_postgresql
    hostname: postgresql
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin}
      POSTGRES_DB: ${POSTGRES_DB:-snake_app_name}
    volumes:
    - ./postgres-data:/var/lib/postgresql/data
    ports:
    - ${POSTGRES_HOST_PORT:-5432}:5432
    networks:
    - zrb


  #############################################################################
  # Monitoring (see: https://github.com/livingdocsIO/monitoring)
  #############################################################################

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.45.0
    container_name: snake_app_name_cadvisor
    hostname: cadvisor
    restart: unless-stopped
    profiles:
    - monitoring
    command: --docker_only=true --store_container_labels=false
    ports: ["9081:8080"]
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    - /dev/disk/:/dev/disk:ro
    networks:
    - zrb
    privileged: true

  grafana:
    image: grafana/grafana:8.3.2
    container_name: snake_app_name_grafana
    hostname: grafana
    restart: unless-stopped
    profiles:
    - monitoring
    ports: ["3000:3000"]
    volumes:
    - ./monitoring/grafana/datasource.yaml:/etc/grafana/provisioning/datasources/monitoring.yaml
    - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    networks:
    - zrb
    # user: "1000:1000"

  jaeger:
    image: jaegertracing/all-in-one:1.30.0
    container_name: snake_app_name_jaeger
    hostname: jaeger
    restart: unless-stopped
    profiles:
    - monitoring
    # ports: ["6831:6831/udp", "6832:6832/udp", "14250:14250", "14269:14269", "16686:16686"]
    ports: ["6831:6831/udp", "6832:6832/udp"]
    networks:
    - zrb
    mem_limit: 512m
    environment:
    - SPAN_STORAGE_TYPE=badger
    - BADGER_EPHEMERAL=false
    - BADGER_DIRECTORY_KEY=/badger/key
    - BADGER_DIRECTORY_VALUE=/badger/data
    - BADGER_SPAN_STORE_TTL=168h0m0s
    # user: "1000:1000"

  loki:
    image: grafana/loki:2.4.1
    container_name: snake_app_name_loki
    hostname: loki
    restart: unless-stopped
    profiles:
    - monitoring
    ports: ["3100:3100"]
    mem_limit: 512m
    volumes:
    - ./monitoring/loki/loki.yaml:/etc/loki/local-config.yaml
    - /var/log:/var/log:ro
    networks:
    - zrb
    # user: "1000:1000"

  opentelemetry-collector:
    image: otel/opentelemetry-collector:0.58.0
    container_name: snake_app_name_opentelemetry_collector
    hostname: opentelemetry-collector
    restart: unless-stopped
    profiles:
    - monitoring
    command: --config=/conf/otel-collector.config.yaml
    # ports: ["9464:9464", "55680:55680", "55681:55681"]
    ports: ["9464:9464"]
    volumes:
    - ./monitoring/otel/otel-collector.yaml:/conf/otel-collector.config.yaml
    networks:
    - zrb

  prometheus:
    image: prom/prometheus:v2.31.2
    container_name: snake_app_name_prometheus
    hostname: prometheus
    restart: unless-stopped
    profiles:
    - monitoring
    command: --config.file=/etc/prometheus/prometheus.yaml --web.route-prefix=/ --storage.tsdb.path=/prometheus --storage.tsdb.retention.time=30d --web.enable-lifecycle --web.enable-admin-api
    ports: ["9090:9090"]
    volumes:
    - ./monitoring/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml
    networks:
    - zrb
    # user: "1000:1000"
    mem_limit: 512m

  vector:
    image: timberio/vector:0.23.3-alpine
    container_name: snake_app_name_vector
    hostname: vector
    restart: unless-stopped
    profiles:
    - monitoring
    ports: ["8383:8383", "8686:8686", "9160:9160", "4545:4545/udp"]
    volumes:
    - ./monitoring/vector/vector.toml:/etc/vector/vector.toml
    - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
    - zrb
    depends_on: [loki, prometheus]
    mem_limit: 100m
    # environment:
      # - VECTOR_LOG=debug

  #############################################################################
  # PascalAppName Monolith
  #############################################################################

  kebab-app-name:
    build:
      dockerfile: Dockerfile
      context: ./src
    image: ${IMAGE:-kebab-app-name}
    container_name: snake_app_name
    hostname: snake_app_name
    env_file:
    - 'src/template.env'
    environment:
      APP_NAME: ${APP_NAME:-kebab-app-name}
      APP_PORT: ${APP_PORT:-8080}
      APP_RMQ_CONNECTION: ${APP_CONTAINER_RMQ_CONNECTION:-amqp://guest:guest@rabbitmq/}
      APP_KAFKA_BOOTSTRAP_SERVERS: ${APP_CONTAINER_KAFKA_BOOTSTRAP_SERVERS:-redpanda:9092}
      APP_DB_CONNECTION: ${APP_CONTAINER_DB_CONNECTION:-postgresql+psycopg2://postgres:admin@postgresql:5432/snake_app_name}
    ports:
    - "${APP_HOST_PORT:-8080}:${APP_PORT:-8080}"
    restart: unless-stopped
    profiles:
    - monolith
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:${APP_PORT:-8080}/readiness || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
    - zrb


  #############################################################################
  # PascalAppName Microservices
  #############################################################################

  kebab-app-name-gateway:
    build:
      dockerfile: Dockerfile
      context: ./src
    image: ${IMAGE:-kebab-app-name}
    container_name: snake_app_name_gateway
    hostname: snake_app_name_gateway
    env_file:
    - 'src/template.env'
    - 'all-module-enabled.env'
    environment:
      APP_NAME: ${APP_NAME:-kebab-app-name}-gateway
      APP_PORT: ${APP_GATEWAY_PORT:-8080}
      APP_RMQ_CONNECTION: ${APP_CONTAINER_RMQ_CONNECTION:-amqp://guest:guest@rabbitmq/}
      APP_KAFKA_BOOTSTRAP_SERVERS: ${APP_CONTAINER_KAFKA_BOOTSTRAP_SERVERS:-redpanda:9092}
      APP_DB_CONNECTION: ${APP_CONTAINER_DB_CONNECTION:-postgresql+psycopg2://postgres:admin@postgresql:5432/snake_app_name}
      APP_ENABLE_EVENT_HANDLER: false
      APP_ENABLE_RPC_SERVER: false
      APP_ENABLE_API: true
      APP_ENABLE_FRONTEND: true
      APP_DB_AUTO_MIGRATE: false
    ports:
    - "${APP_GATEWAY_HOST_PORT:-8080}:${APP_GATEWAY_PORT:-8080}"
    restart: unless-stopped
    profiles:
    - microservices
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:${APP_GATEWAY_PORT:-8080}/readiness || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
    - zrb


  kebab-app-name-auth:
    build:
      dockerfile: Dockerfile
      context: ./src
    image: ${IMAGE:-fastapp}
    container_name: snake_app_name_auth
    hostname: snake_app_name_auth
    env_file:
    - src/template.env
    - all-module-disabled.env
    environment:
      APP_NAME: ${APP_NAME:-fastapp}-auth-service
      APP_PORT: ${APP_AUTH_MODULE_PORT:-8081}
      APP_RMQ_CONNECTION: ${APP_CONTAINER_RMQ_CONNECTION:-amqp://guest:guest@rabbitmq/}
      APP_KAFKA_BOOTSTRAP_SERVERS: ${APP_CONTAINER_KAFKA_BOOTSTRAP_SERVERS:-redpanda:9092}
      APP_DB_CONNECTION: ${APP_CONTAINER_DB_CONNECTION:-postgresql+psycopg2://postgres:admin@postgresql:5432/snake_app_name}
      APP_ENABLE_EVENT_HANDLER: true
      APP_ENABLE_RPC_SERVER: true
      APP_ENABLE_API: false
      APP_ENABLE_FRONTEND: false
      APP_ENABLE_AUTH_MODULE: true
    ports:
    - ${APP_AUTH_HOST_MODULE_PORT:-8081}:${APP_AUTH_MODULE_PORT:-8081}
    restart: unless-stopped
    profiles:
    - microservices
    healthcheck:
      test:
      - CMD-SHELL
      - curl --fail http://localhost:${APP_PORT:-8080}/readiness || exit 1
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
    - zrb


  kebab-app-name-log:
    build:
      dockerfile: Dockerfile
      context: ./src
    image: ${IMAGE:-fastapp}
    container_name: snake_app_name_log
    hostname: snake_app_name_log
    env_file:
    - src/template.env
    - all-module-disabled.env
    environment:
      APP_NAME: ${APP_NAME:-fastapp}-log-service
      APP_PORT: ${APP_LOG_MODULE_PORT:-8083}
      APP_RMQ_CONNECTION: ${APP_CONTAINER_RMQ_CONNECTION:-amqp://guest:guest@rabbitmq/}
      APP_KAFKA_BOOTSTRAP_SERVERS: ${APP_CONTAINER_KAFKA_BOOTSTRAP_SERVERS:-redpanda:9092}
      APP_DB_CONNECTION: ${APP_CONTAINER_DB_CONNECTION:-postgresql+psycopg2://postgres:admin@postgresql:5432/snake_app_name}
      APP_ENABLE_EVENT_HANDLER: 'true'
      APP_ENABLE_RPC_SERVER: 'true'
      APP_ENABLE_API: 'false'
      APP_ENABLE_FRONTEND: 'false'
      APP_ENABLE_LOG_MODULE: 'true'
    ports:
    - ${APP_LOG_HOST_MODULE_PORT:-8082}:${APP_LOG_MODULE_PORT:-8082}
    restart: unless-stopped
    profiles:
    - microservices
    healthcheck:
      test:
      - CMD-SHELL
      - curl --fail http://localhost:${APP_PORT:-8080}/readiness || exit 1
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
    - zrb